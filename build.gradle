buildscript {
	ext {
		springBootVersion = '2.0.0.RC1'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }			
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("se.transmode.gradle:gradle-docker:1.2")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: 'docker'

group = 'ch.so.agi.ilivalidator'
version '0.1.3'+System.getProperty('release','-'+new Date().format('yyyyMMdd-HHmmss-SSSS'))

description = """ilivalidator web service"""

bootJar {
    launchScript()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
	mavenCentral()
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
    maven { url "http://jars.interlis.ch/" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    compile("commons-io:commons-io:2.5")
    compile("ch.interlis:ilivalidator:1.5.0")
    compile("org.webjars:materializecss:0.100.1")
    compile("org.webjars:jquery:2.2.4")
	compile("io.rest-assured:rest-assured:3.0.3")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
		exclude(module: 'commons-logging')
    }
}

test {
	testLogging {
		showStandardStreams = true
	}
}

// Build
/*
task buildDocker(type: Docker) {
	//tag = "${project.group}/${applicationName}:${tagVersion}"
	tagVersion = 'latest'
	//tagVersion = '0.0.8-green'
	//tagVersion = '0.0.8'
	baseImage = 'frolvlad/alpine-oraclejdk8:slim'
	push = project.hasProperty('push') // <-> "./gradlew buildDocker -Ppush"
	applicationName = jar.baseName
	addFile {
		from jar
		rename {'app.jar'}
	}
  	entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
}
*/
task buildDocker(type: Docker) {
	push = project.hasProperty('push') // <-> "./gradlew buildDocker -Ppush"
	tagVersion = version
	tag = "sogis/ilivalidator-web-service"
	dockerfile = file('Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}	
}

// Needed for Jenkins and AWS pipeline and Docker images tagging.
// I do have problems with some addition output in the console
// from versioning plugin: "noWarningOnDirty = true" does not 
// seem to work. -> Some workarounds in buildspec.yml.
// Some more notes: At the moment aws codepipeline does not
// copy the git meta stuff to codebuild hence we cannot
// get the git sha. We use the date for the versioning of
// the docker image for now :-(
task getVersion {
	println project.version
}