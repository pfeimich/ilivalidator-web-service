buildscript {
	ext {
		springBootVersion = '2.0.0.RC1'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }			
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		//classpath("se.transmode.gradle:gradle-docker:1.2")
		classpath("com.bmuschko:gradle-docker-plugin:3.2.3")			
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
//apply plugin: 'docker'
apply plugin: 'com.bmuschko.docker-remote-api'

group = 'ch.so.agi.ilivalidator'
version '0.1.3'+System.getProperty('release','-'+new Date().format('yyyyMMdd-HHmmss-SSSS'))

description = """ilivalidator web service"""

bootJar {
    launchScript()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
	mavenCentral()
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
    maven { url "http://jars.interlis.ch/" }
    maven { url "http://repo.maven.apache.org/maven2" }
    // Bug in docker plugin: https://github.com/bmuschko/gradle-docker-plugin/issues/467
   	maven { url 'https://oss.sonatype.org/content/groups/public' }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    compile("commons-io:commons-io:2.5")
    compile("ch.interlis:ilivalidator:1.5.0")
    compile("org.webjars:materializecss:0.100.1")
    compile("org.webjars:jquery:2.2.4")
	compile("io.rest-assured:rest-assured:3.0.3")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
		exclude(module: 'commons-logging')
    }
    // Bug in docker plugin: https://github.com/bmuschko/gradle-docker-plugin/issues/467
    dockerJava 'com.github.docker-java:docker-java:3.1.0-SNAPSHOT'
    dockerJava 'org.slf4j:slf4j-simple:1.7.5'
    dockerJava 'cglib:cglib:3.2.0'    
}

test {
	testLogging {
		showStandardStreams = true
	}
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerLogsContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort

task buildDockerImage(type: DockerBuildImage) {
    inputDir = project.rootDir
    tag = "sogis/ilivalidator-web-service:${version}"
}

task createDockerContainer(dependsOn: 'buildDockerImage', type: DockerCreateContainer) {
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['8888:8888']
    exposedPorts = [new ExposedPort("tcp", [8888])]
    
}

task startDockerContainer(dependsOn: 'createDockerContainer', type: DockerStartContainer) {
    targetContainerId { createDockerContainer.getContainerId() }

    // Starting container != web service is ready.
    /*
    doLast { 
        sleep(10*1000)
    }
    */
}

task logDockerContainer(type: DockerLogsContainer) {
    targetContainerId { startDockerContainer.getContainerId() }
    follow = true
    tailAll = true
}

startDockerContainer.finalizedBy('logDockerContainer')

// Needed for Jenkins and AWS pipeline and Docker images tagging.
// I do have problems with some addition output in the console
// from versioning plugin: "noWarningOnDirty = true" does not 
// seem to work. -> Some workarounds in buildspec.yml.
// Some more notes: At the moment aws codepipeline does not
// copy the git meta stuff to codebuild hence we cannot
// get the git sha. We use the date for the versioning of
// the docker image for now :-(
task getVersion {
	println project.version
}